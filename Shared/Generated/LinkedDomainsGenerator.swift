import Foundation

class LinkedDomain {
    let domains: [String]
    init(_ domains: [String]) {
        self.domains = domains
    }
}

func mergedLinkedDomains() -> [[String]] {
    let linkedDomains = LinkedDomains.sharedBackend
    let redirectedDomains = LinkedDomains.redirectedDomains.map { key, domains in domains + [key] }
    let ssoDomains = LinkedDomains.ssoDomains.map { key, domains in domains + [key] }

            return (linkedDomains + redirectedDomains + ssoDomains).reduce([]) { acc, domains -> [[String]] in
        let partition = Dictionary(grouping: acc) { $0.filter(domains.contains).isEmpty }
        let right = partition[false] ?? []
        let left = partition[true] ?? []

        let intersection = Set(domains + right.flatMap {$0})
        return left + [Array(intersection)]
    }
}

let outputString = CommandLine.arguments[1]
guard !outputString.isEmpty else {
    fatalError("Could not find output path in arguments")
}
let outputPathURL = URL(fileURLWithPath: outputString)

var result = ""
mergedLinkedDomains().forEach { group in
    if !group.isEmpty {
    var groupResult = ""
    group.forEach { domain in
        groupResult += """

            \"\(domain)\",
        """
    }
        result += """

            [ \(groupResult) ],
        """
    }
}



let fileContent = """
//
//  linkeddomains.generated.swift
//  This file is autogenerated
//

import Foundation


public struct LinkedDomains {
    static let linkedDomains: [[String]] = [
        \(result)
    ]
}

"""

do {
    try fileContent.write(to: outputPathURL, atomically: false, encoding: .utf8)
} catch {
    print(error)
}



